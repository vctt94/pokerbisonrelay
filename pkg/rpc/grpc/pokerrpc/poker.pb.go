// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v3.21.12
// source: poker.proto

package pokerrpc

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enums
type GamePhase int32

const (
	GamePhase_WAITING          GamePhase = 0
	GamePhase_NEW_HAND_DEALING GamePhase = 1
	GamePhase_PRE_FLOP         GamePhase = 2
	GamePhase_FLOP             GamePhase = 3
	GamePhase_TURN             GamePhase = 4
	GamePhase_RIVER            GamePhase = 5
	GamePhase_SHOWDOWN         GamePhase = 6
)

// Enum value maps for GamePhase.
var (
	GamePhase_name = map[int32]string{
		0: "WAITING",
		1: "NEW_HAND_DEALING",
		2: "PRE_FLOP",
		3: "FLOP",
		4: "TURN",
		5: "RIVER",
		6: "SHOWDOWN",
	}
	GamePhase_value = map[string]int32{
		"WAITING":          0,
		"NEW_HAND_DEALING": 1,
		"PRE_FLOP":         2,
		"FLOP":             3,
		"TURN":             4,
		"RIVER":            5,
		"SHOWDOWN":         6,
	}
)

func (x GamePhase) Enum() *GamePhase {
	p := new(GamePhase)
	*p = x
	return p
}

func (x GamePhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GamePhase) Descriptor() protoreflect.EnumDescriptor {
	return file_poker_proto_enumTypes[0].Descriptor()
}

func (GamePhase) Type() protoreflect.EnumType {
	return &file_poker_proto_enumTypes[0]
}

func (x GamePhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GamePhase.Descriptor instead.
func (GamePhase) EnumDescriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{0}
}

type NotificationType int32

const (
	NotificationType_UNKNOWN            NotificationType = 0
	NotificationType_PLAYER_JOINED      NotificationType = 1
	NotificationType_PLAYER_LEFT        NotificationType = 2
	NotificationType_GAME_STARTED       NotificationType = 3
	NotificationType_GAME_ENDED         NotificationType = 4
	NotificationType_BET_MADE           NotificationType = 5
	NotificationType_PLAYER_FOLDED      NotificationType = 6
	NotificationType_NEW_ROUND          NotificationType = 7
	NotificationType_SHOWDOWN_RESULT    NotificationType = 8
	NotificationType_TIP_RECEIVED       NotificationType = 9
	NotificationType_BALANCE_UPDATED    NotificationType = 10
	NotificationType_TABLE_CREATED      NotificationType = 11
	NotificationType_TABLE_REMOVED      NotificationType = 12
	NotificationType_PLAYER_READY       NotificationType = 13
	NotificationType_PLAYER_UNREADY     NotificationType = 14
	NotificationType_ALL_PLAYERS_READY  NotificationType = 15
	NotificationType_SMALL_BLIND_POSTED NotificationType = 16
	NotificationType_BIG_BLIND_POSTED   NotificationType = 17
	NotificationType_CALL_MADE          NotificationType = 18
	NotificationType_CHECK_MADE         NotificationType = 19
	NotificationType_CARDS_SHOWN        NotificationType = 20
	NotificationType_CARDS_HIDDEN       NotificationType = 21
	NotificationType_NEW_HAND_STARTED   NotificationType = 22
	NotificationType_PLAYER_ALL_IN      NotificationType = 23
)

// Enum value maps for NotificationType.
var (
	NotificationType_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "PLAYER_JOINED",
		2:  "PLAYER_LEFT",
		3:  "GAME_STARTED",
		4:  "GAME_ENDED",
		5:  "BET_MADE",
		6:  "PLAYER_FOLDED",
		7:  "NEW_ROUND",
		8:  "SHOWDOWN_RESULT",
		9:  "TIP_RECEIVED",
		10: "BALANCE_UPDATED",
		11: "TABLE_CREATED",
		12: "TABLE_REMOVED",
		13: "PLAYER_READY",
		14: "PLAYER_UNREADY",
		15: "ALL_PLAYERS_READY",
		16: "SMALL_BLIND_POSTED",
		17: "BIG_BLIND_POSTED",
		18: "CALL_MADE",
		19: "CHECK_MADE",
		20: "CARDS_SHOWN",
		21: "CARDS_HIDDEN",
		22: "NEW_HAND_STARTED",
		23: "PLAYER_ALL_IN",
	}
	NotificationType_value = map[string]int32{
		"UNKNOWN":            0,
		"PLAYER_JOINED":      1,
		"PLAYER_LEFT":        2,
		"GAME_STARTED":       3,
		"GAME_ENDED":         4,
		"BET_MADE":           5,
		"PLAYER_FOLDED":      6,
		"NEW_ROUND":          7,
		"SHOWDOWN_RESULT":    8,
		"TIP_RECEIVED":       9,
		"BALANCE_UPDATED":    10,
		"TABLE_CREATED":      11,
		"TABLE_REMOVED":      12,
		"PLAYER_READY":       13,
		"PLAYER_UNREADY":     14,
		"ALL_PLAYERS_READY":  15,
		"SMALL_BLIND_POSTED": 16,
		"BIG_BLIND_POSTED":   17,
		"CALL_MADE":          18,
		"CHECK_MADE":         19,
		"CARDS_SHOWN":        20,
		"CARDS_HIDDEN":       21,
		"NEW_HAND_STARTED":   22,
		"PLAYER_ALL_IN":      23,
	}
)

func (x NotificationType) Enum() *NotificationType {
	p := new(NotificationType)
	*p = x
	return p
}

func (x NotificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_poker_proto_enumTypes[1].Descriptor()
}

func (NotificationType) Type() protoreflect.EnumType {
	return &file_poker_proto_enumTypes[1]
}

func (x NotificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotificationType.Descriptor instead.
func (NotificationType) EnumDescriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{1}
}

type HandRank int32

const (
	HandRank_HIGH_CARD       HandRank = 0
	HandRank_PAIR            HandRank = 1
	HandRank_TWO_PAIR        HandRank = 2
	HandRank_THREE_OF_A_KIND HandRank = 3
	HandRank_STRAIGHT        HandRank = 4
	HandRank_FLUSH           HandRank = 5
	HandRank_FULL_HOUSE      HandRank = 6
	HandRank_FOUR_OF_A_KIND  HandRank = 7
	HandRank_STRAIGHT_FLUSH  HandRank = 8
	HandRank_ROYAL_FLUSH     HandRank = 9
)

// Enum value maps for HandRank.
var (
	HandRank_name = map[int32]string{
		0: "HIGH_CARD",
		1: "PAIR",
		2: "TWO_PAIR",
		3: "THREE_OF_A_KIND",
		4: "STRAIGHT",
		5: "FLUSH",
		6: "FULL_HOUSE",
		7: "FOUR_OF_A_KIND",
		8: "STRAIGHT_FLUSH",
		9: "ROYAL_FLUSH",
	}
	HandRank_value = map[string]int32{
		"HIGH_CARD":       0,
		"PAIR":            1,
		"TWO_PAIR":        2,
		"THREE_OF_A_KIND": 3,
		"STRAIGHT":        4,
		"FLUSH":           5,
		"FULL_HOUSE":      6,
		"FOUR_OF_A_KIND":  7,
		"STRAIGHT_FLUSH":  8,
		"ROYAL_FLUSH":     9,
	}
)

func (x HandRank) Enum() *HandRank {
	p := new(HandRank)
	*p = x
	return p
}

func (x HandRank) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HandRank) Descriptor() protoreflect.EnumDescriptor {
	return file_poker_proto_enumTypes[2].Descriptor()
}

func (HandRank) Type() protoreflect.EnumType {
	return &file_poker_proto_enumTypes[2]
}

func (x HandRank) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HandRank.Descriptor instead.
func (HandRank) EnumDescriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{2}
}

// Game Messages
type StartGameStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	TableId       string                 `protobuf:"bytes,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartGameStreamRequest) Reset() {
	*x = StartGameStreamRequest{}
	mi := &file_poker_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartGameStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartGameStreamRequest) ProtoMessage() {}

func (x *StartGameStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartGameStreamRequest.ProtoReflect.Descriptor instead.
func (*StartGameStreamRequest) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{0}
}

func (x *StartGameStreamRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *StartGameStreamRequest) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

type GameUpdate struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TableId         string                 `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Phase           GamePhase              `protobuf:"varint,2,opt,name=phase,proto3,enum=poker.GamePhase" json:"phase,omitempty"`
	Players         []*Player              `protobuf:"bytes,3,rep,name=players,proto3" json:"players,omitempty"`
	CommunityCards  []*Card                `protobuf:"bytes,4,rep,name=community_cards,json=communityCards,proto3" json:"community_cards,omitempty"`
	Pot             int64                  `protobuf:"varint,5,opt,name=pot,proto3" json:"pot,omitempty"`                                 // Total poker chips in the pot
	CurrentBet      int64                  `protobuf:"varint,6,opt,name=current_bet,json=currentBet,proto3" json:"current_bet,omitempty"` // Current poker chips bet amount in this round
	CurrentPlayer   string                 `protobuf:"bytes,7,opt,name=current_player,json=currentPlayer,proto3" json:"current_player,omitempty"`
	MinRaise        int64                  `protobuf:"varint,8,opt,name=min_raise,json=minRaise,proto3" json:"min_raise,omitempty"` // Minimum poker chips raise amount
	MaxRaise        int64                  `protobuf:"varint,9,opt,name=max_raise,json=maxRaise,proto3" json:"max_raise,omitempty"` // Maximum poker chips raise amount
	GameStarted     bool                   `protobuf:"varint,10,opt,name=game_started,json=gameStarted,proto3" json:"game_started,omitempty"`
	PlayersRequired int32                  `protobuf:"varint,11,opt,name=players_required,json=playersRequired,proto3" json:"players_required,omitempty"`
	PlayersJoined   int32                  `protobuf:"varint,12,opt,name=players_joined,json=playersJoined,proto3" json:"players_joined,omitempty"`
	PhaseName       string                 `protobuf:"bytes,13,opt,name=phase_name,json=phaseName,proto3" json:"phase_name,omitempty"` // Human-readable name of the current phase
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GameUpdate) Reset() {
	*x = GameUpdate{}
	mi := &file_poker_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameUpdate) ProtoMessage() {}

func (x *GameUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameUpdate.ProtoReflect.Descriptor instead.
func (*GameUpdate) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{1}
}

func (x *GameUpdate) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *GameUpdate) GetPhase() GamePhase {
	if x != nil {
		return x.Phase
	}
	return GamePhase_WAITING
}

func (x *GameUpdate) GetPlayers() []*Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *GameUpdate) GetCommunityCards() []*Card {
	if x != nil {
		return x.CommunityCards
	}
	return nil
}

func (x *GameUpdate) GetPot() int64 {
	if x != nil {
		return x.Pot
	}
	return 0
}

func (x *GameUpdate) GetCurrentBet() int64 {
	if x != nil {
		return x.CurrentBet
	}
	return 0
}

func (x *GameUpdate) GetCurrentPlayer() string {
	if x != nil {
		return x.CurrentPlayer
	}
	return ""
}

func (x *GameUpdate) GetMinRaise() int64 {
	if x != nil {
		return x.MinRaise
	}
	return 0
}

func (x *GameUpdate) GetMaxRaise() int64 {
	if x != nil {
		return x.MaxRaise
	}
	return 0
}

func (x *GameUpdate) GetGameStarted() bool {
	if x != nil {
		return x.GameStarted
	}
	return false
}

func (x *GameUpdate) GetPlayersRequired() int32 {
	if x != nil {
		return x.PlayersRequired
	}
	return 0
}

func (x *GameUpdate) GetPlayersJoined() int32 {
	if x != nil {
		return x.PlayersJoined
	}
	return 0
}

func (x *GameUpdate) GetPhaseName() string {
	if x != nil {
		return x.PhaseName
	}
	return ""
}

type MakeBetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	TableId       string                 `protobuf:"bytes,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Amount        int64                  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"` // Poker chips amount to bet
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MakeBetRequest) Reset() {
	*x = MakeBetRequest{}
	mi := &file_poker_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MakeBetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeBetRequest) ProtoMessage() {}

func (x *MakeBetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeBetRequest.ProtoReflect.Descriptor instead.
func (*MakeBetRequest) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{2}
}

func (x *MakeBetRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *MakeBetRequest) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *MakeBetRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type MakeBetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	NewBalance    int64                  `protobuf:"varint,3,opt,name=new_balance,json=newBalance,proto3" json:"new_balance,omitempty"` // Player's new DCR account balance (in atoms)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MakeBetResponse) Reset() {
	*x = MakeBetResponse{}
	mi := &file_poker_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MakeBetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeBetResponse) ProtoMessage() {}

func (x *MakeBetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeBetResponse.ProtoReflect.Descriptor instead.
func (*MakeBetResponse) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{3}
}

func (x *MakeBetResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MakeBetResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MakeBetResponse) GetNewBalance() int64 {
	if x != nil {
		return x.NewBalance
	}
	return 0
}

type FoldBetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	TableId       string                 `protobuf:"bytes,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FoldBetRequest) Reset() {
	*x = FoldBetRequest{}
	mi := &file_poker_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FoldBetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FoldBetRequest) ProtoMessage() {}

func (x *FoldBetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FoldBetRequest.ProtoReflect.Descriptor instead.
func (*FoldBetRequest) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{4}
}

func (x *FoldBetRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *FoldBetRequest) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

type FoldBetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FoldBetResponse) Reset() {
	*x = FoldBetResponse{}
	mi := &file_poker_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FoldBetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FoldBetResponse) ProtoMessage() {}

func (x *FoldBetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FoldBetResponse.ProtoReflect.Descriptor instead.
func (*FoldBetResponse) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{5}
}

func (x *FoldBetResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *FoldBetResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CheckBetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	TableId       string                 `protobuf:"bytes,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckBetRequest) Reset() {
	*x = CheckBetRequest{}
	mi := &file_poker_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckBetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckBetRequest) ProtoMessage() {}

func (x *CheckBetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckBetRequest.ProtoReflect.Descriptor instead.
func (*CheckBetRequest) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{6}
}

func (x *CheckBetRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *CheckBetRequest) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

type CheckBetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckBetResponse) Reset() {
	*x = CheckBetResponse{}
	mi := &file_poker_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckBetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckBetResponse) ProtoMessage() {}

func (x *CheckBetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckBetResponse.ProtoReflect.Descriptor instead.
func (*CheckBetResponse) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{7}
}

func (x *CheckBetResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CheckBetResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CallBetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	TableId       string                 `protobuf:"bytes,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CallBetRequest) Reset() {
	*x = CallBetRequest{}
	mi := &file_poker_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallBetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallBetRequest) ProtoMessage() {}

func (x *CallBetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallBetRequest.ProtoReflect.Descriptor instead.
func (*CallBetRequest) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{8}
}

func (x *CallBetRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *CallBetRequest) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

type CallBetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CallBetResponse) Reset() {
	*x = CallBetResponse{}
	mi := &file_poker_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallBetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallBetResponse) ProtoMessage() {}

func (x *CallBetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallBetResponse.ProtoReflect.Descriptor instead.
func (*CallBetResponse) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{9}
}

func (x *CallBetResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CallBetResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetGameStateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableId       string                 `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGameStateRequest) Reset() {
	*x = GetGameStateRequest{}
	mi := &file_poker_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGameStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameStateRequest) ProtoMessage() {}

func (x *GetGameStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameStateRequest.ProtoReflect.Descriptor instead.
func (*GetGameStateRequest) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{10}
}

func (x *GetGameStateRequest) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

type GetGameStateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameState     *GameUpdate            `protobuf:"bytes,1,opt,name=game_state,json=gameState,proto3" json:"game_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGameStateResponse) Reset() {
	*x = GetGameStateResponse{}
	mi := &file_poker_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGameStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameStateResponse) ProtoMessage() {}

func (x *GetGameStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameStateResponse.ProtoReflect.Descriptor instead.
func (*GetGameStateResponse) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{11}
}

func (x *GetGameStateResponse) GetGameState() *GameUpdate {
	if x != nil {
		return x.GameState
	}
	return nil
}

type EvaluateHandRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cards         []*Card                `protobuf:"bytes,1,rep,name=cards,proto3" json:"cards,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EvaluateHandRequest) Reset() {
	*x = EvaluateHandRequest{}
	mi := &file_poker_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvaluateHandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateHandRequest) ProtoMessage() {}

func (x *EvaluateHandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateHandRequest.ProtoReflect.Descriptor instead.
func (*EvaluateHandRequest) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{12}
}

func (x *EvaluateHandRequest) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

type EvaluateHandResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rank          HandRank               `protobuf:"varint,1,opt,name=rank,proto3,enum=poker.HandRank" json:"rank,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	BestHand      []*Card                `protobuf:"bytes,3,rep,name=best_hand,json=bestHand,proto3" json:"best_hand,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EvaluateHandResponse) Reset() {
	*x = EvaluateHandResponse{}
	mi := &file_poker_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvaluateHandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateHandResponse) ProtoMessage() {}

func (x *EvaluateHandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateHandResponse.ProtoReflect.Descriptor instead.
func (*EvaluateHandResponse) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{13}
}

func (x *EvaluateHandResponse) GetRank() HandRank {
	if x != nil {
		return x.Rank
	}
	return HandRank_HIGH_CARD
}

func (x *EvaluateHandResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EvaluateHandResponse) GetBestHand() []*Card {
	if x != nil {
		return x.BestHand
	}
	return nil
}

type GetLastWinnersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableId       string                 `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLastWinnersRequest) Reset() {
	*x = GetLastWinnersRequest{}
	mi := &file_poker_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLastWinnersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastWinnersRequest) ProtoMessage() {}

func (x *GetLastWinnersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastWinnersRequest.ProtoReflect.Descriptor instead.
func (*GetLastWinnersRequest) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{14}
}

func (x *GetLastWinnersRequest) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

type GetLastWinnersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Winners       []*Winner              `protobuf:"bytes,1,rep,name=winners,proto3" json:"winners,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLastWinnersResponse) Reset() {
	*x = GetLastWinnersResponse{}
	mi := &file_poker_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLastWinnersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastWinnersResponse) ProtoMessage() {}

func (x *GetLastWinnersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastWinnersResponse.ProtoReflect.Descriptor instead.
func (*GetLastWinnersResponse) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{15}
}

func (x *GetLastWinnersResponse) GetWinners() []*Winner {
	if x != nil {
		return x.Winners
	}
	return nil
}

type Winner struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	HandRank      HandRank               `protobuf:"varint,2,opt,name=hand_rank,json=handRank,proto3,enum=poker.HandRank" json:"hand_rank,omitempty"`
	BestHand      []*Card                `protobuf:"bytes,3,rep,name=best_hand,json=bestHand,proto3" json:"best_hand,omitempty"`
	Winnings      int64                  `protobuf:"varint,4,opt,name=winnings,proto3" json:"winnings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Winner) Reset() {
	*x = Winner{}
	mi := &file_poker_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Winner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Winner) ProtoMessage() {}

func (x *Winner) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Winner.ProtoReflect.Descriptor instead.
func (*Winner) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{16}
}

func (x *Winner) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *Winner) GetHandRank() HandRank {
	if x != nil {
		return x.HandRank
	}
	return HandRank_HIGH_CARD
}

func (x *Winner) GetBestHand() []*Card {
	if x != nil {
		return x.BestHand
	}
	return nil
}

func (x *Winner) GetWinnings() int64 {
	if x != nil {
		return x.Winnings
	}
	return 0
}

// Lobby Messages
type CreateTableRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PlayerId        string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	SmallBlind      int64                  `protobuf:"varint,2,opt,name=small_blind,json=smallBlind,proto3" json:"small_blind,omitempty"` // Poker chips amount for small blind
	BigBlind        int64                  `protobuf:"varint,3,opt,name=big_blind,json=bigBlind,proto3" json:"big_blind,omitempty"`       // Poker chips amount for big blind
	MaxPlayers      int32                  `protobuf:"varint,4,opt,name=max_players,json=maxPlayers,proto3" json:"max_players,omitempty"`
	MinPlayers      int32                  `protobuf:"varint,5,opt,name=min_players,json=minPlayers,proto3" json:"min_players,omitempty"`
	MinBalance      int64                  `protobuf:"varint,6,opt,name=min_balance,json=minBalance,proto3" json:"min_balance,omitempty"`                  // Minimum DCR balance required (in atoms)
	BuyIn           int64                  `protobuf:"varint,7,opt,name=buy_in,json=buyIn,proto3" json:"buy_in,omitempty"`                                 // DCR amount to join table (in atoms)
	StartingChips   int64                  `protobuf:"varint,8,opt,name=starting_chips,json=startingChips,proto3" json:"starting_chips,omitempty"`         // Poker chips each player starts with
	TimeBankSeconds int32                  `protobuf:"varint,9,opt,name=time_bank_seconds,json=timeBankSeconds,proto3" json:"time_bank_seconds,omitempty"` // Player timeout in seconds (default: 30)
	AutoStartMs     int32                  `protobuf:"varint,10,opt,name=auto_start_ms,json=autoStartMs,proto3" json:"auto_start_ms,omitempty"`            // Auto-start delay between hands in ms (0 = disabled)
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CreateTableRequest) Reset() {
	*x = CreateTableRequest{}
	mi := &file_poker_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableRequest) ProtoMessage() {}

func (x *CreateTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableRequest.ProtoReflect.Descriptor instead.
func (*CreateTableRequest) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{17}
}

func (x *CreateTableRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *CreateTableRequest) GetSmallBlind() int64 {
	if x != nil {
		return x.SmallBlind
	}
	return 0
}

func (x *CreateTableRequest) GetBigBlind() int64 {
	if x != nil {
		return x.BigBlind
	}
	return 0
}

func (x *CreateTableRequest) GetMaxPlayers() int32 {
	if x != nil {
		return x.MaxPlayers
	}
	return 0
}

func (x *CreateTableRequest) GetMinPlayers() int32 {
	if x != nil {
		return x.MinPlayers
	}
	return 0
}

func (x *CreateTableRequest) GetMinBalance() int64 {
	if x != nil {
		return x.MinBalance
	}
	return 0
}

func (x *CreateTableRequest) GetBuyIn() int64 {
	if x != nil {
		return x.BuyIn
	}
	return 0
}

func (x *CreateTableRequest) GetStartingChips() int64 {
	if x != nil {
		return x.StartingChips
	}
	return 0
}

func (x *CreateTableRequest) GetTimeBankSeconds() int32 {
	if x != nil {
		return x.TimeBankSeconds
	}
	return 0
}

func (x *CreateTableRequest) GetAutoStartMs() int32 {
	if x != nil {
		return x.AutoStartMs
	}
	return 0
}

type CreateTableResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableId       string                 `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTableResponse) Reset() {
	*x = CreateTableResponse{}
	mi := &file_poker_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableResponse) ProtoMessage() {}

func (x *CreateTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableResponse.ProtoReflect.Descriptor instead.
func (*CreateTableResponse) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{18}
}

func (x *CreateTableResponse) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

type JoinTableRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	TableId       string                 `protobuf:"bytes,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinTableRequest) Reset() {
	*x = JoinTableRequest{}
	mi := &file_poker_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinTableRequest) ProtoMessage() {}

func (x *JoinTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinTableRequest.ProtoReflect.Descriptor instead.
func (*JoinTableRequest) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{19}
}

func (x *JoinTableRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *JoinTableRequest) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

type JoinTableResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	NewBalance    int64                  `protobuf:"varint,3,opt,name=new_balance,json=newBalance,proto3" json:"new_balance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinTableResponse) Reset() {
	*x = JoinTableResponse{}
	mi := &file_poker_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinTableResponse) ProtoMessage() {}

func (x *JoinTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinTableResponse.ProtoReflect.Descriptor instead.
func (*JoinTableResponse) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{20}
}

func (x *JoinTableResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *JoinTableResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *JoinTableResponse) GetNewBalance() int64 {
	if x != nil {
		return x.NewBalance
	}
	return 0
}

type LeaveTableRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	TableId       string                 `protobuf:"bytes,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaveTableRequest) Reset() {
	*x = LeaveTableRequest{}
	mi := &file_poker_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaveTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveTableRequest) ProtoMessage() {}

func (x *LeaveTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveTableRequest.ProtoReflect.Descriptor instead.
func (*LeaveTableRequest) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{21}
}

func (x *LeaveTableRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *LeaveTableRequest) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

type LeaveTableResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaveTableResponse) Reset() {
	*x = LeaveTableResponse{}
	mi := &file_poker_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaveTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveTableResponse) ProtoMessage() {}

func (x *LeaveTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveTableResponse.ProtoReflect.Descriptor instead.
func (*LeaveTableResponse) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{22}
}

func (x *LeaveTableResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *LeaveTableResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetTablesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTablesRequest) Reset() {
	*x = GetTablesRequest{}
	mi := &file_poker_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTablesRequest) ProtoMessage() {}

func (x *GetTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTablesRequest.ProtoReflect.Descriptor instead.
func (*GetTablesRequest) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{23}
}

type GetTablesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tables        []*Table               `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTablesResponse) Reset() {
	*x = GetTablesResponse{}
	mi := &file_poker_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTablesResponse) ProtoMessage() {}

func (x *GetTablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTablesResponse.ProtoReflect.Descriptor instead.
func (*GetTablesResponse) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{24}
}

func (x *GetTablesResponse) GetTables() []*Table {
	if x != nil {
		return x.Tables
	}
	return nil
}

type Table struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	HostId          string                 `protobuf:"bytes,2,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	Players         []*Player              `protobuf:"bytes,3,rep,name=players,proto3" json:"players,omitempty"`
	SmallBlind      int64                  `protobuf:"varint,4,opt,name=small_blind,json=smallBlind,proto3" json:"small_blind,omitempty"` // Poker chips amount for small blind
	BigBlind        int64                  `protobuf:"varint,5,opt,name=big_blind,json=bigBlind,proto3" json:"big_blind,omitempty"`       // Poker chips amount for big blind
	MaxPlayers      int32                  `protobuf:"varint,6,opt,name=max_players,json=maxPlayers,proto3" json:"max_players,omitempty"`
	MinPlayers      int32                  `protobuf:"varint,7,opt,name=min_players,json=minPlayers,proto3" json:"min_players,omitempty"`
	CurrentPlayers  int32                  `protobuf:"varint,8,opt,name=current_players,json=currentPlayers,proto3" json:"current_players,omitempty"`
	MinBalance      int64                  `protobuf:"varint,9,opt,name=min_balance,json=minBalance,proto3" json:"min_balance,omitempty"` // Minimum DCR balance required (in atoms)
	BuyIn           int64                  `protobuf:"varint,10,opt,name=buy_in,json=buyIn,proto3" json:"buy_in,omitempty"`               // DCR amount to join table (in atoms)
	Phase           GamePhase              `protobuf:"varint,11,opt,name=phase,proto3,enum=poker.GamePhase" json:"phase,omitempty"`
	GameStarted     bool                   `protobuf:"varint,12,opt,name=game_started,json=gameStarted,proto3" json:"game_started,omitempty"`
	AllPlayersReady bool                   `protobuf:"varint,13,opt,name=all_players_ready,json=allPlayersReady,proto3" json:"all_players_ready,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Table) Reset() {
	*x = Table{}
	mi := &file_poker_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{25}
}

func (x *Table) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Table) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *Table) GetPlayers() []*Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *Table) GetSmallBlind() int64 {
	if x != nil {
		return x.SmallBlind
	}
	return 0
}

func (x *Table) GetBigBlind() int64 {
	if x != nil {
		return x.BigBlind
	}
	return 0
}

func (x *Table) GetMaxPlayers() int32 {
	if x != nil {
		return x.MaxPlayers
	}
	return 0
}

func (x *Table) GetMinPlayers() int32 {
	if x != nil {
		return x.MinPlayers
	}
	return 0
}

func (x *Table) GetCurrentPlayers() int32 {
	if x != nil {
		return x.CurrentPlayers
	}
	return 0
}

func (x *Table) GetMinBalance() int64 {
	if x != nil {
		return x.MinBalance
	}
	return 0
}

func (x *Table) GetBuyIn() int64 {
	if x != nil {
		return x.BuyIn
	}
	return 0
}

func (x *Table) GetPhase() GamePhase {
	if x != nil {
		return x.Phase
	}
	return GamePhase_WAITING
}

func (x *Table) GetGameStarted() bool {
	if x != nil {
		return x.GameStarted
	}
	return false
}

func (x *Table) GetAllPlayersReady() bool {
	if x != nil {
		return x.AllPlayersReady
	}
	return false
}

type GetBalanceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBalanceRequest) Reset() {
	*x = GetBalanceRequest{}
	mi := &file_poker_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceRequest) ProtoMessage() {}

func (x *GetBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetBalanceRequest) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{26}
}

func (x *GetBalanceRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

type GetBalanceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Balance       int64                  `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"` // DCR account balance (in atoms)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBalanceResponse) Reset() {
	*x = GetBalanceResponse{}
	mi := &file_poker_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceResponse) ProtoMessage() {}

func (x *GetBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceResponse.ProtoReflect.Descriptor instead.
func (*GetBalanceResponse) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{27}
}

func (x *GetBalanceResponse) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type UpdateBalanceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	Amount        int64                  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"` // DCR amount to add/subtract (in atoms, can be negative)
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateBalanceRequest) Reset() {
	*x = UpdateBalanceRequest{}
	mi := &file_poker_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBalanceRequest) ProtoMessage() {}

func (x *UpdateBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBalanceRequest.ProtoReflect.Descriptor instead.
func (*UpdateBalanceRequest) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateBalanceRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *UpdateBalanceRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *UpdateBalanceRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type UpdateBalanceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NewBalance    int64                  `protobuf:"varint,1,opt,name=new_balance,json=newBalance,proto3" json:"new_balance,omitempty"` // New DCR account balance (in atoms)
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateBalanceResponse) Reset() {
	*x = UpdateBalanceResponse{}
	mi := &file_poker_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBalanceResponse) ProtoMessage() {}

func (x *UpdateBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBalanceResponse.ProtoReflect.Descriptor instead.
func (*UpdateBalanceResponse) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateBalanceResponse) GetNewBalance() int64 {
	if x != nil {
		return x.NewBalance
	}
	return 0
}

func (x *UpdateBalanceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ProcessTipRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FromPlayerId  string                 `protobuf:"bytes,1,opt,name=from_player_id,json=fromPlayerId,proto3" json:"from_player_id,omitempty"`
	ToPlayerId    string                 `protobuf:"bytes,2,opt,name=to_player_id,json=toPlayerId,proto3" json:"to_player_id,omitempty"`
	Amount        int64                  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"` // DCR amount to tip (in atoms)
	Message       string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessTipRequest) Reset() {
	*x = ProcessTipRequest{}
	mi := &file_poker_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessTipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTipRequest) ProtoMessage() {}

func (x *ProcessTipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTipRequest.ProtoReflect.Descriptor instead.
func (*ProcessTipRequest) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{30}
}

func (x *ProcessTipRequest) GetFromPlayerId() string {
	if x != nil {
		return x.FromPlayerId
	}
	return ""
}

func (x *ProcessTipRequest) GetToPlayerId() string {
	if x != nil {
		return x.ToPlayerId
	}
	return ""
}

func (x *ProcessTipRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ProcessTipRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ProcessTipResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	NewBalance    int64                  `protobuf:"varint,3,opt,name=new_balance,json=newBalance,proto3" json:"new_balance,omitempty"` // Recipient's new DCR account balance (in atoms)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessTipResponse) Reset() {
	*x = ProcessTipResponse{}
	mi := &file_poker_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessTipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTipResponse) ProtoMessage() {}

func (x *ProcessTipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTipResponse.ProtoReflect.Descriptor instead.
func (*ProcessTipResponse) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{31}
}

func (x *ProcessTipResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ProcessTipResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ProcessTipResponse) GetNewBalance() int64 {
	if x != nil {
		return x.NewBalance
	}
	return 0
}

type StartNotificationStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartNotificationStreamRequest) Reset() {
	*x = StartNotificationStreamRequest{}
	mi := &file_poker_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartNotificationStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartNotificationStreamRequest) ProtoMessage() {}

func (x *StartNotificationStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartNotificationStreamRequest.ProtoReflect.Descriptor instead.
func (*StartNotificationStreamRequest) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{32}
}

func (x *StartNotificationStreamRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

type Notification struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Type            NotificationType       `protobuf:"varint,1,opt,name=type,proto3,enum=poker.NotificationType" json:"type,omitempty"`
	Message         string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	TableId         string                 `protobuf:"bytes,3,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	PlayerId        string                 `protobuf:"bytes,4,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	Amount          int64                  `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Cards           []*Card                `protobuf:"bytes,6,rep,name=cards,proto3" json:"cards,omitempty"`
	HandRank        HandRank               `protobuf:"varint,7,opt,name=hand_rank,json=handRank,proto3,enum=poker.HandRank" json:"hand_rank,omitempty"`
	NewBalance      int64                  `protobuf:"varint,8,opt,name=new_balance,json=newBalance,proto3" json:"new_balance,omitempty"`
	Table           *Table                 `protobuf:"bytes,9,opt,name=table,proto3" json:"table,omitempty"`
	Ready           bool                   `protobuf:"varint,10,opt,name=ready,proto3" json:"ready,omitempty"`
	Started         bool                   `protobuf:"varint,11,opt,name=started,proto3" json:"started,omitempty"`
	GameReadyToPlay bool                   `protobuf:"varint,12,opt,name=game_ready_to_play,json=gameReadyToPlay,proto3" json:"game_ready_to_play,omitempty"`
	Countdown       int32                  `protobuf:"varint,13,opt,name=countdown,proto3" json:"countdown,omitempty"`
	Winners         []*Winner              `protobuf:"bytes,14,rep,name=winners,proto3" json:"winners,omitempty"`
	Showdown        *Showdown              `protobuf:"bytes,15,opt,name=showdown,proto3" json:"showdown,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Notification) Reset() {
	*x = Notification{}
	mi := &file_poker_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification) ProtoMessage() {}

func (x *Notification) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification.ProtoReflect.Descriptor instead.
func (*Notification) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{33}
}

func (x *Notification) GetType() NotificationType {
	if x != nil {
		return x.Type
	}
	return NotificationType_UNKNOWN
}

func (x *Notification) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Notification) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *Notification) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *Notification) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Notification) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *Notification) GetHandRank() HandRank {
	if x != nil {
		return x.HandRank
	}
	return HandRank_HIGH_CARD
}

func (x *Notification) GetNewBalance() int64 {
	if x != nil {
		return x.NewBalance
	}
	return 0
}

func (x *Notification) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *Notification) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *Notification) GetStarted() bool {
	if x != nil {
		return x.Started
	}
	return false
}

func (x *Notification) GetGameReadyToPlay() bool {
	if x != nil {
		return x.GameReadyToPlay
	}
	return false
}

func (x *Notification) GetCountdown() int32 {
	if x != nil {
		return x.Countdown
	}
	return 0
}

func (x *Notification) GetWinners() []*Winner {
	if x != nil {
		return x.Winners
	}
	return nil
}

func (x *Notification) GetShowdown() *Showdown {
	if x != nil {
		return x.Showdown
	}
	return nil
}

type Showdown struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Winners       []*Winner              `protobuf:"bytes,1,rep,name=winners,proto3" json:"winners,omitempty"`
	Pot           int64                  `protobuf:"varint,2,opt,name=pot,proto3" json:"pot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Showdown) Reset() {
	*x = Showdown{}
	mi := &file_poker_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Showdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Showdown) ProtoMessage() {}

func (x *Showdown) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Showdown.ProtoReflect.Descriptor instead.
func (*Showdown) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{34}
}

func (x *Showdown) GetWinners() []*Winner {
	if x != nil {
		return x.Winners
	}
	return nil
}

func (x *Showdown) GetPot() int64 {
	if x != nil {
		return x.Pot
	}
	return 0
}

// Common Messages
type Player struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Balance         int64                  `protobuf:"varint,3,opt,name=balance,proto3" json:"balance,omitempty"` // Poker chips balance (in-game currency)
	Hand            []*Card                `protobuf:"bytes,4,rep,name=hand,proto3" json:"hand,omitempty"`
	CurrentBet      int64                  `protobuf:"varint,5,opt,name=current_bet,json=currentBet,proto3" json:"current_bet,omitempty"` // Current poker chips bet in this round
	Folded          bool                   `protobuf:"varint,6,opt,name=folded,proto3" json:"folded,omitempty"`
	IsTurn          bool                   `protobuf:"varint,7,opt,name=is_turn,json=isTurn,proto3" json:"is_turn,omitempty"`
	IsAllIn         bool                   `protobuf:"varint,8,opt,name=is_all_in,json=isAllIn,proto3" json:"is_all_in,omitempty"`
	IsDealer        bool                   `protobuf:"varint,9,opt,name=is_dealer,json=isDealer,proto3" json:"is_dealer,omitempty"`
	IsReady         bool                   `protobuf:"varint,10,opt,name=is_ready,json=isReady,proto3" json:"is_ready,omitempty"`
	HandDescription string                 `protobuf:"bytes,11,opt,name=hand_description,json=handDescription,proto3" json:"hand_description,omitempty"` // Hand evaluation description (available during showdown)
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Player) Reset() {
	*x = Player{}
	mi := &file_poker_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{35}
}

func (x *Player) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Player) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Player) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *Player) GetHand() []*Card {
	if x != nil {
		return x.Hand
	}
	return nil
}

func (x *Player) GetCurrentBet() int64 {
	if x != nil {
		return x.CurrentBet
	}
	return 0
}

func (x *Player) GetFolded() bool {
	if x != nil {
		return x.Folded
	}
	return false
}

func (x *Player) GetIsTurn() bool {
	if x != nil {
		return x.IsTurn
	}
	return false
}

func (x *Player) GetIsAllIn() bool {
	if x != nil {
		return x.IsAllIn
	}
	return false
}

func (x *Player) GetIsDealer() bool {
	if x != nil {
		return x.IsDealer
	}
	return false
}

func (x *Player) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

func (x *Player) GetHandDescription() string {
	if x != nil {
		return x.HandDescription
	}
	return ""
}

type Card struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Suit          string                 `protobuf:"bytes,1,opt,name=suit,proto3" json:"suit,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Card) Reset() {
	*x = Card{}
	mi := &file_poker_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{36}
}

func (x *Card) GetSuit() string {
	if x != nil {
		return x.Suit
	}
	return ""
}

func (x *Card) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SetPlayerReadyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	TableId       string                 `protobuf:"bytes,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetPlayerReadyRequest) Reset() {
	*x = SetPlayerReadyRequest{}
	mi := &file_poker_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPlayerReadyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPlayerReadyRequest) ProtoMessage() {}

func (x *SetPlayerReadyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPlayerReadyRequest.ProtoReflect.Descriptor instead.
func (*SetPlayerReadyRequest) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{37}
}

func (x *SetPlayerReadyRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *SetPlayerReadyRequest) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

type SetPlayerReadyResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Success         bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message         string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	AllPlayersReady bool                   `protobuf:"varint,3,opt,name=all_players_ready,json=allPlayersReady,proto3" json:"all_players_ready,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetPlayerReadyResponse) Reset() {
	*x = SetPlayerReadyResponse{}
	mi := &file_poker_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPlayerReadyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPlayerReadyResponse) ProtoMessage() {}

func (x *SetPlayerReadyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPlayerReadyResponse.ProtoReflect.Descriptor instead.
func (*SetPlayerReadyResponse) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{38}
}

func (x *SetPlayerReadyResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SetPlayerReadyResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SetPlayerReadyResponse) GetAllPlayersReady() bool {
	if x != nil {
		return x.AllPlayersReady
	}
	return false
}

type SetPlayerUnreadyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	TableId       string                 `protobuf:"bytes,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetPlayerUnreadyRequest) Reset() {
	*x = SetPlayerUnreadyRequest{}
	mi := &file_poker_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPlayerUnreadyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPlayerUnreadyRequest) ProtoMessage() {}

func (x *SetPlayerUnreadyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPlayerUnreadyRequest.ProtoReflect.Descriptor instead.
func (*SetPlayerUnreadyRequest) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{39}
}

func (x *SetPlayerUnreadyRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *SetPlayerUnreadyRequest) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

type SetPlayerUnreadyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetPlayerUnreadyResponse) Reset() {
	*x = SetPlayerUnreadyResponse{}
	mi := &file_poker_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPlayerUnreadyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPlayerUnreadyResponse) ProtoMessage() {}

func (x *SetPlayerUnreadyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPlayerUnreadyResponse.ProtoReflect.Descriptor instead.
func (*SetPlayerUnreadyResponse) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{40}
}

func (x *SetPlayerUnreadyResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SetPlayerUnreadyResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetPlayerCurrentTableRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPlayerCurrentTableRequest) Reset() {
	*x = GetPlayerCurrentTableRequest{}
	mi := &file_poker_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlayerCurrentTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayerCurrentTableRequest) ProtoMessage() {}

func (x *GetPlayerCurrentTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayerCurrentTableRequest.ProtoReflect.Descriptor instead.
func (*GetPlayerCurrentTableRequest) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{41}
}

func (x *GetPlayerCurrentTableRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

type GetPlayerCurrentTableResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableId       string                 `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPlayerCurrentTableResponse) Reset() {
	*x = GetPlayerCurrentTableResponse{}
	mi := &file_poker_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlayerCurrentTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayerCurrentTableResponse) ProtoMessage() {}

func (x *GetPlayerCurrentTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayerCurrentTableResponse.ProtoReflect.Descriptor instead.
func (*GetPlayerCurrentTableResponse) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{42}
}

func (x *GetPlayerCurrentTableResponse) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

type ShowCardsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	TableId       string                 `protobuf:"bytes,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShowCardsRequest) Reset() {
	*x = ShowCardsRequest{}
	mi := &file_poker_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShowCardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowCardsRequest) ProtoMessage() {}

func (x *ShowCardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowCardsRequest.ProtoReflect.Descriptor instead.
func (*ShowCardsRequest) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{43}
}

func (x *ShowCardsRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *ShowCardsRequest) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

type ShowCardsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShowCardsResponse) Reset() {
	*x = ShowCardsResponse{}
	mi := &file_poker_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShowCardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowCardsResponse) ProtoMessage() {}

func (x *ShowCardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowCardsResponse.ProtoReflect.Descriptor instead.
func (*ShowCardsResponse) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{44}
}

func (x *ShowCardsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ShowCardsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type HideCardsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	TableId       string                 `protobuf:"bytes,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HideCardsRequest) Reset() {
	*x = HideCardsRequest{}
	mi := &file_poker_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HideCardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HideCardsRequest) ProtoMessage() {}

func (x *HideCardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HideCardsRequest.ProtoReflect.Descriptor instead.
func (*HideCardsRequest) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{45}
}

func (x *HideCardsRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *HideCardsRequest) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

type HideCardsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HideCardsResponse) Reset() {
	*x = HideCardsResponse{}
	mi := &file_poker_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HideCardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HideCardsResponse) ProtoMessage() {}

func (x *HideCardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HideCardsResponse.ProtoReflect.Descriptor instead.
func (*HideCardsResponse) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{46}
}

func (x *HideCardsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *HideCardsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_poker_proto protoreflect.FileDescriptor

const file_poker_proto_rawDesc = "" +
	"\n" +
	"\vpoker.proto\x12\x05poker\"P\n" +
	"\x16StartGameStreamRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x12\x19\n" +
	"\btable_id\x18\x02 \x01(\tR\atableId\"\xd6\x03\n" +
	"\n" +
	"GameUpdate\x12\x19\n" +
	"\btable_id\x18\x01 \x01(\tR\atableId\x12&\n" +
	"\x05phase\x18\x02 \x01(\x0e2\x10.poker.GamePhaseR\x05phase\x12'\n" +
	"\aplayers\x18\x03 \x03(\v2\r.poker.PlayerR\aplayers\x124\n" +
	"\x0fcommunity_cards\x18\x04 \x03(\v2\v.poker.CardR\x0ecommunityCards\x12\x10\n" +
	"\x03pot\x18\x05 \x01(\x03R\x03pot\x12\x1f\n" +
	"\vcurrent_bet\x18\x06 \x01(\x03R\n" +
	"currentBet\x12%\n" +
	"\x0ecurrent_player\x18\a \x01(\tR\rcurrentPlayer\x12\x1b\n" +
	"\tmin_raise\x18\b \x01(\x03R\bminRaise\x12\x1b\n" +
	"\tmax_raise\x18\t \x01(\x03R\bmaxRaise\x12!\n" +
	"\fgame_started\x18\n" +
	" \x01(\bR\vgameStarted\x12)\n" +
	"\x10players_required\x18\v \x01(\x05R\x0fplayersRequired\x12%\n" +
	"\x0eplayers_joined\x18\f \x01(\x05R\rplayersJoined\x12\x1d\n" +
	"\n" +
	"phase_name\x18\r \x01(\tR\tphaseName\"`\n" +
	"\x0eMakeBetRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x12\x19\n" +
	"\btable_id\x18\x02 \x01(\tR\atableId\x12\x16\n" +
	"\x06amount\x18\x03 \x01(\x03R\x06amount\"f\n" +
	"\x0fMakeBetResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1f\n" +
	"\vnew_balance\x18\x03 \x01(\x03R\n" +
	"newBalance\"H\n" +
	"\x0eFoldBetRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x12\x19\n" +
	"\btable_id\x18\x02 \x01(\tR\atableId\"E\n" +
	"\x0fFoldBetResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"I\n" +
	"\x0fCheckBetRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x12\x19\n" +
	"\btable_id\x18\x02 \x01(\tR\atableId\"F\n" +
	"\x10CheckBetResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"H\n" +
	"\x0eCallBetRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x12\x19\n" +
	"\btable_id\x18\x02 \x01(\tR\atableId\"E\n" +
	"\x0fCallBetResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"0\n" +
	"\x13GetGameStateRequest\x12\x19\n" +
	"\btable_id\x18\x01 \x01(\tR\atableId\"H\n" +
	"\x14GetGameStateResponse\x120\n" +
	"\n" +
	"game_state\x18\x01 \x01(\v2\x11.poker.GameUpdateR\tgameState\"8\n" +
	"\x13EvaluateHandRequest\x12!\n" +
	"\x05cards\x18\x01 \x03(\v2\v.poker.CardR\x05cards\"\x87\x01\n" +
	"\x14EvaluateHandResponse\x12#\n" +
	"\x04rank\x18\x01 \x01(\x0e2\x0f.poker.HandRankR\x04rank\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12(\n" +
	"\tbest_hand\x18\x03 \x03(\v2\v.poker.CardR\bbestHand\"2\n" +
	"\x15GetLastWinnersRequest\x12\x19\n" +
	"\btable_id\x18\x01 \x01(\tR\atableId\"A\n" +
	"\x16GetLastWinnersResponse\x12'\n" +
	"\awinners\x18\x01 \x03(\v2\r.poker.WinnerR\awinners\"\x99\x01\n" +
	"\x06Winner\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x12,\n" +
	"\thand_rank\x18\x02 \x01(\x0e2\x0f.poker.HandRankR\bhandRank\x12(\n" +
	"\tbest_hand\x18\x03 \x03(\v2\v.poker.CardR\bbestHand\x12\x1a\n" +
	"\bwinnings\x18\x04 \x01(\x03R\bwinnings\"\xe0\x02\n" +
	"\x12CreateTableRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x12\x1f\n" +
	"\vsmall_blind\x18\x02 \x01(\x03R\n" +
	"smallBlind\x12\x1b\n" +
	"\tbig_blind\x18\x03 \x01(\x03R\bbigBlind\x12\x1f\n" +
	"\vmax_players\x18\x04 \x01(\x05R\n" +
	"maxPlayers\x12\x1f\n" +
	"\vmin_players\x18\x05 \x01(\x05R\n" +
	"minPlayers\x12\x1f\n" +
	"\vmin_balance\x18\x06 \x01(\x03R\n" +
	"minBalance\x12\x15\n" +
	"\x06buy_in\x18\a \x01(\x03R\x05buyIn\x12%\n" +
	"\x0estarting_chips\x18\b \x01(\x03R\rstartingChips\x12*\n" +
	"\x11time_bank_seconds\x18\t \x01(\x05R\x0ftimeBankSeconds\x12\"\n" +
	"\rauto_start_ms\x18\n" +
	" \x01(\x05R\vautoStartMs\"0\n" +
	"\x13CreateTableResponse\x12\x19\n" +
	"\btable_id\x18\x01 \x01(\tR\atableId\"J\n" +
	"\x10JoinTableRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x12\x19\n" +
	"\btable_id\x18\x02 \x01(\tR\atableId\"h\n" +
	"\x11JoinTableResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1f\n" +
	"\vnew_balance\x18\x03 \x01(\x03R\n" +
	"newBalance\"K\n" +
	"\x11LeaveTableRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x12\x19\n" +
	"\btable_id\x18\x02 \x01(\tR\atableId\"H\n" +
	"\x12LeaveTableResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\x12\n" +
	"\x10GetTablesRequest\"9\n" +
	"\x11GetTablesResponse\x12$\n" +
	"\x06tables\x18\x01 \x03(\v2\f.poker.TableR\x06tables\"\xb1\x03\n" +
	"\x05Table\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x17\n" +
	"\ahost_id\x18\x02 \x01(\tR\x06hostId\x12'\n" +
	"\aplayers\x18\x03 \x03(\v2\r.poker.PlayerR\aplayers\x12\x1f\n" +
	"\vsmall_blind\x18\x04 \x01(\x03R\n" +
	"smallBlind\x12\x1b\n" +
	"\tbig_blind\x18\x05 \x01(\x03R\bbigBlind\x12\x1f\n" +
	"\vmax_players\x18\x06 \x01(\x05R\n" +
	"maxPlayers\x12\x1f\n" +
	"\vmin_players\x18\a \x01(\x05R\n" +
	"minPlayers\x12'\n" +
	"\x0fcurrent_players\x18\b \x01(\x05R\x0ecurrentPlayers\x12\x1f\n" +
	"\vmin_balance\x18\t \x01(\x03R\n" +
	"minBalance\x12\x15\n" +
	"\x06buy_in\x18\n" +
	" \x01(\x03R\x05buyIn\x12&\n" +
	"\x05phase\x18\v \x01(\x0e2\x10.poker.GamePhaseR\x05phase\x12!\n" +
	"\fgame_started\x18\f \x01(\bR\vgameStarted\x12*\n" +
	"\x11all_players_ready\x18\r \x01(\bR\x0fallPlayersReady\"0\n" +
	"\x11GetBalanceRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\".\n" +
	"\x12GetBalanceResponse\x12\x18\n" +
	"\abalance\x18\x01 \x01(\x03R\abalance\"m\n" +
	"\x14UpdateBalanceRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x12\x16\n" +
	"\x06amount\x18\x02 \x01(\x03R\x06amount\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\"R\n" +
	"\x15UpdateBalanceResponse\x12\x1f\n" +
	"\vnew_balance\x18\x01 \x01(\x03R\n" +
	"newBalance\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\x8d\x01\n" +
	"\x11ProcessTipRequest\x12$\n" +
	"\x0efrom_player_id\x18\x01 \x01(\tR\ffromPlayerId\x12 \n" +
	"\fto_player_id\x18\x02 \x01(\tR\n" +
	"toPlayerId\x12\x16\n" +
	"\x06amount\x18\x03 \x01(\x03R\x06amount\x12\x18\n" +
	"\amessage\x18\x04 \x01(\tR\amessage\"i\n" +
	"\x12ProcessTipResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1f\n" +
	"\vnew_balance\x18\x03 \x01(\x03R\n" +
	"newBalance\"=\n" +
	"\x1eStartNotificationStreamRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\"\x8c\x04\n" +
	"\fNotification\x12+\n" +
	"\x04type\x18\x01 \x01(\x0e2\x17.poker.NotificationTypeR\x04type\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x19\n" +
	"\btable_id\x18\x03 \x01(\tR\atableId\x12\x1b\n" +
	"\tplayer_id\x18\x04 \x01(\tR\bplayerId\x12\x16\n" +
	"\x06amount\x18\x05 \x01(\x03R\x06amount\x12!\n" +
	"\x05cards\x18\x06 \x03(\v2\v.poker.CardR\x05cards\x12,\n" +
	"\thand_rank\x18\a \x01(\x0e2\x0f.poker.HandRankR\bhandRank\x12\x1f\n" +
	"\vnew_balance\x18\b \x01(\x03R\n" +
	"newBalance\x12\"\n" +
	"\x05table\x18\t \x01(\v2\f.poker.TableR\x05table\x12\x14\n" +
	"\x05ready\x18\n" +
	" \x01(\bR\x05ready\x12\x18\n" +
	"\astarted\x18\v \x01(\bR\astarted\x12+\n" +
	"\x12game_ready_to_play\x18\f \x01(\bR\x0fgameReadyToPlay\x12\x1c\n" +
	"\tcountdown\x18\r \x01(\x05R\tcountdown\x12'\n" +
	"\awinners\x18\x0e \x03(\v2\r.poker.WinnerR\awinners\x12+\n" +
	"\bshowdown\x18\x0f \x01(\v2\x0f.poker.ShowdownR\bshowdown\"E\n" +
	"\bShowdown\x12'\n" +
	"\awinners\x18\x01 \x03(\v2\r.poker.WinnerR\awinners\x12\x10\n" +
	"\x03pot\x18\x02 \x01(\x03R\x03pot\"\xb8\x02\n" +
	"\x06Player\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x18\n" +
	"\abalance\x18\x03 \x01(\x03R\abalance\x12\x1f\n" +
	"\x04hand\x18\x04 \x03(\v2\v.poker.CardR\x04hand\x12\x1f\n" +
	"\vcurrent_bet\x18\x05 \x01(\x03R\n" +
	"currentBet\x12\x16\n" +
	"\x06folded\x18\x06 \x01(\bR\x06folded\x12\x17\n" +
	"\ais_turn\x18\a \x01(\bR\x06isTurn\x12\x1a\n" +
	"\tis_all_in\x18\b \x01(\bR\aisAllIn\x12\x1b\n" +
	"\tis_dealer\x18\t \x01(\bR\bisDealer\x12\x19\n" +
	"\bis_ready\x18\n" +
	" \x01(\bR\aisReady\x12)\n" +
	"\x10hand_description\x18\v \x01(\tR\x0fhandDescription\"0\n" +
	"\x04Card\x12\x12\n" +
	"\x04suit\x18\x01 \x01(\tR\x04suit\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"O\n" +
	"\x15SetPlayerReadyRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x12\x19\n" +
	"\btable_id\x18\x02 \x01(\tR\atableId\"x\n" +
	"\x16SetPlayerReadyResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12*\n" +
	"\x11all_players_ready\x18\x03 \x01(\bR\x0fallPlayersReady\"Q\n" +
	"\x17SetPlayerUnreadyRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x12\x19\n" +
	"\btable_id\x18\x02 \x01(\tR\atableId\"N\n" +
	"\x18SetPlayerUnreadyResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\";\n" +
	"\x1cGetPlayerCurrentTableRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\":\n" +
	"\x1dGetPlayerCurrentTableResponse\x12\x19\n" +
	"\btable_id\x18\x01 \x01(\tR\atableId\"J\n" +
	"\x10ShowCardsRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x12\x19\n" +
	"\btable_id\x18\x02 \x01(\tR\atableId\"G\n" +
	"\x11ShowCardsResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"J\n" +
	"\x10HideCardsRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x12\x19\n" +
	"\btable_id\x18\x02 \x01(\tR\atableId\"G\n" +
	"\x11HideCardsResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage*i\n" +
	"\tGamePhase\x12\v\n" +
	"\aWAITING\x10\x00\x12\x14\n" +
	"\x10NEW_HAND_DEALING\x10\x01\x12\f\n" +
	"\bPRE_FLOP\x10\x02\x12\b\n" +
	"\x04FLOP\x10\x03\x12\b\n" +
	"\x04TURN\x10\x04\x12\t\n" +
	"\x05RIVER\x10\x05\x12\f\n" +
	"\bSHOWDOWN\x10\x06*\xba\x03\n" +
	"\x10NotificationType\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\x11\n" +
	"\rPLAYER_JOINED\x10\x01\x12\x0f\n" +
	"\vPLAYER_LEFT\x10\x02\x12\x10\n" +
	"\fGAME_STARTED\x10\x03\x12\x0e\n" +
	"\n" +
	"GAME_ENDED\x10\x04\x12\f\n" +
	"\bBET_MADE\x10\x05\x12\x11\n" +
	"\rPLAYER_FOLDED\x10\x06\x12\r\n" +
	"\tNEW_ROUND\x10\a\x12\x13\n" +
	"\x0fSHOWDOWN_RESULT\x10\b\x12\x10\n" +
	"\fTIP_RECEIVED\x10\t\x12\x13\n" +
	"\x0fBALANCE_UPDATED\x10\n" +
	"\x12\x11\n" +
	"\rTABLE_CREATED\x10\v\x12\x11\n" +
	"\rTABLE_REMOVED\x10\f\x12\x10\n" +
	"\fPLAYER_READY\x10\r\x12\x12\n" +
	"\x0ePLAYER_UNREADY\x10\x0e\x12\x15\n" +
	"\x11ALL_PLAYERS_READY\x10\x0f\x12\x16\n" +
	"\x12SMALL_BLIND_POSTED\x10\x10\x12\x14\n" +
	"\x10BIG_BLIND_POSTED\x10\x11\x12\r\n" +
	"\tCALL_MADE\x10\x12\x12\x0e\n" +
	"\n" +
	"CHECK_MADE\x10\x13\x12\x0f\n" +
	"\vCARDS_SHOWN\x10\x14\x12\x10\n" +
	"\fCARDS_HIDDEN\x10\x15\x12\x14\n" +
	"\x10NEW_HAND_STARTED\x10\x16*\xa8\x01\n" +
	"\bHandRank\x12\r\n" +
	"\tHIGH_CARD\x10\x00\x12\b\n" +
	"\x04PAIR\x10\x01\x12\f\n" +
	"\bTWO_PAIR\x10\x02\x12\x13\n" +
	"\x0fTHREE_OF_A_KIND\x10\x03\x12\f\n" +
	"\bSTRAIGHT\x10\x04\x12\t\n" +
	"\x05FLUSH\x10\x05\x12\x0e\n" +
	"\n" +
	"FULL_HOUSE\x10\x06\x12\x12\n" +
	"\x0eFOUR_OF_A_KIND\x10\a\x12\x12\n" +
	"\x0eSTRAIGHT_FLUSH\x10\b\x12\x0f\n" +
	"\vROYAL_FLUSH\x10\t2\xb5\x05\n" +
	"\fPokerService\x12G\n" +
	"\x0fStartGameStream\x12\x1d.poker.StartGameStreamRequest\x1a\x11.poker.GameUpdate\"\x000\x01\x12@\n" +
	"\tShowCards\x12\x17.poker.ShowCardsRequest\x1a\x18.poker.ShowCardsResponse\"\x00\x12@\n" +
	"\tHideCards\x12\x17.poker.HideCardsRequest\x1a\x18.poker.HideCardsResponse\"\x00\x12:\n" +
	"\aMakeBet\x12\x15.poker.MakeBetRequest\x1a\x16.poker.MakeBetResponse\"\x00\x12:\n" +
	"\aCallBet\x12\x15.poker.CallBetRequest\x1a\x16.poker.CallBetResponse\"\x00\x12:\n" +
	"\aFoldBet\x12\x15.poker.FoldBetRequest\x1a\x16.poker.FoldBetResponse\"\x00\x12=\n" +
	"\bCheckBet\x12\x16.poker.CheckBetRequest\x1a\x17.poker.CheckBetResponse\"\x00\x12I\n" +
	"\fGetGameState\x12\x1a.poker.GetGameStateRequest\x1a\x1b.poker.GetGameStateResponse\"\x00\x12I\n" +
	"\fEvaluateHand\x12\x1a.poker.EvaluateHandRequest\x1a\x1b.poker.EvaluateHandResponse\"\x00\x12O\n" +
	"\x0eGetLastWinners\x12\x1c.poker.GetLastWinnersRequest\x1a\x1d.poker.GetLastWinnersResponse\"\x002\xe0\x06\n" +
	"\fLobbyService\x12F\n" +
	"\vCreateTable\x12\x19.poker.CreateTableRequest\x1a\x1a.poker.CreateTableResponse\"\x00\x12@\n" +
	"\tJoinTable\x12\x17.poker.JoinTableRequest\x1a\x18.poker.JoinTableResponse\"\x00\x12C\n" +
	"\n" +
	"LeaveTable\x12\x18.poker.LeaveTableRequest\x1a\x19.poker.LeaveTableResponse\"\x00\x12@\n" +
	"\tGetTables\x12\x17.poker.GetTablesRequest\x1a\x18.poker.GetTablesResponse\"\x00\x12d\n" +
	"\x15GetPlayerCurrentTable\x12#.poker.GetPlayerCurrentTableRequest\x1a$.poker.GetPlayerCurrentTableResponse\"\x00\x12C\n" +
	"\n" +
	"GetBalance\x12\x18.poker.GetBalanceRequest\x1a\x19.poker.GetBalanceResponse\"\x00\x12L\n" +
	"\rUpdateBalance\x12\x1b.poker.UpdateBalanceRequest\x1a\x1c.poker.UpdateBalanceResponse\"\x00\x12C\n" +
	"\n" +
	"ProcessTip\x12\x18.poker.ProcessTipRequest\x1a\x19.poker.ProcessTipResponse\"\x00\x12O\n" +
	"\x0eSetPlayerReady\x12\x1c.poker.SetPlayerReadyRequest\x1a\x1d.poker.SetPlayerReadyResponse\"\x00\x12U\n" +
	"\x10SetPlayerUnready\x12\x1e.poker.SetPlayerUnreadyRequest\x1a\x1f.poker.SetPlayerUnreadyResponse\"\x00\x12Y\n" +
	"\x17StartNotificationStream\x12%.poker.StartNotificationStreamRequest\x1a\x13.poker.Notification\"\x000\x01B\x0fZ\rgrpc/pokerrpcb\x06proto3"

var (
	file_poker_proto_rawDescOnce sync.Once
	file_poker_proto_rawDescData []byte
)

func file_poker_proto_rawDescGZIP() []byte {
	file_poker_proto_rawDescOnce.Do(func() {
		file_poker_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_poker_proto_rawDesc), len(file_poker_proto_rawDesc)))
	})
	return file_poker_proto_rawDescData
}

var file_poker_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_poker_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_poker_proto_goTypes = []any{
	(GamePhase)(0),                         // 0: poker.GamePhase
	(NotificationType)(0),                  // 1: poker.NotificationType
	(HandRank)(0),                          // 2: poker.HandRank
	(*StartGameStreamRequest)(nil),         // 3: poker.StartGameStreamRequest
	(*GameUpdate)(nil),                     // 4: poker.GameUpdate
	(*MakeBetRequest)(nil),                 // 5: poker.MakeBetRequest
	(*MakeBetResponse)(nil),                // 6: poker.MakeBetResponse
	(*FoldBetRequest)(nil),                 // 7: poker.FoldBetRequest
	(*FoldBetResponse)(nil),                // 8: poker.FoldBetResponse
	(*CheckBetRequest)(nil),                // 9: poker.CheckBetRequest
	(*CheckBetResponse)(nil),               // 10: poker.CheckBetResponse
	(*CallBetRequest)(nil),                 // 11: poker.CallBetRequest
	(*CallBetResponse)(nil),                // 12: poker.CallBetResponse
	(*GetGameStateRequest)(nil),            // 13: poker.GetGameStateRequest
	(*GetGameStateResponse)(nil),           // 14: poker.GetGameStateResponse
	(*EvaluateHandRequest)(nil),            // 15: poker.EvaluateHandRequest
	(*EvaluateHandResponse)(nil),           // 16: poker.EvaluateHandResponse
	(*GetLastWinnersRequest)(nil),          // 17: poker.GetLastWinnersRequest
	(*GetLastWinnersResponse)(nil),         // 18: poker.GetLastWinnersResponse
	(*Winner)(nil),                         // 19: poker.Winner
	(*CreateTableRequest)(nil),             // 20: poker.CreateTableRequest
	(*CreateTableResponse)(nil),            // 21: poker.CreateTableResponse
	(*JoinTableRequest)(nil),               // 22: poker.JoinTableRequest
	(*JoinTableResponse)(nil),              // 23: poker.JoinTableResponse
	(*LeaveTableRequest)(nil),              // 24: poker.LeaveTableRequest
	(*LeaveTableResponse)(nil),             // 25: poker.LeaveTableResponse
	(*GetTablesRequest)(nil),               // 26: poker.GetTablesRequest
	(*GetTablesResponse)(nil),              // 27: poker.GetTablesResponse
	(*Table)(nil),                          // 28: poker.Table
	(*GetBalanceRequest)(nil),              // 29: poker.GetBalanceRequest
	(*GetBalanceResponse)(nil),             // 30: poker.GetBalanceResponse
	(*UpdateBalanceRequest)(nil),           // 31: poker.UpdateBalanceRequest
	(*UpdateBalanceResponse)(nil),          // 32: poker.UpdateBalanceResponse
	(*ProcessTipRequest)(nil),              // 33: poker.ProcessTipRequest
	(*ProcessTipResponse)(nil),             // 34: poker.ProcessTipResponse
	(*StartNotificationStreamRequest)(nil), // 35: poker.StartNotificationStreamRequest
	(*Notification)(nil),                   // 36: poker.Notification
	(*Showdown)(nil),                       // 37: poker.Showdown
	(*Player)(nil),                         // 38: poker.Player
	(*Card)(nil),                           // 39: poker.Card
	(*SetPlayerReadyRequest)(nil),          // 40: poker.SetPlayerReadyRequest
	(*SetPlayerReadyResponse)(nil),         // 41: poker.SetPlayerReadyResponse
	(*SetPlayerUnreadyRequest)(nil),        // 42: poker.SetPlayerUnreadyRequest
	(*SetPlayerUnreadyResponse)(nil),       // 43: poker.SetPlayerUnreadyResponse
	(*GetPlayerCurrentTableRequest)(nil),   // 44: poker.GetPlayerCurrentTableRequest
	(*GetPlayerCurrentTableResponse)(nil),  // 45: poker.GetPlayerCurrentTableResponse
	(*ShowCardsRequest)(nil),               // 46: poker.ShowCardsRequest
	(*ShowCardsResponse)(nil),              // 47: poker.ShowCardsResponse
	(*HideCardsRequest)(nil),               // 48: poker.HideCardsRequest
	(*HideCardsResponse)(nil),              // 49: poker.HideCardsResponse
}
var file_poker_proto_depIdxs = []int32{
	0,  // 0: poker.GameUpdate.phase:type_name -> poker.GamePhase
	38, // 1: poker.GameUpdate.players:type_name -> poker.Player
	39, // 2: poker.GameUpdate.community_cards:type_name -> poker.Card
	4,  // 3: poker.GetGameStateResponse.game_state:type_name -> poker.GameUpdate
	39, // 4: poker.EvaluateHandRequest.cards:type_name -> poker.Card
	2,  // 5: poker.EvaluateHandResponse.rank:type_name -> poker.HandRank
	39, // 6: poker.EvaluateHandResponse.best_hand:type_name -> poker.Card
	19, // 7: poker.GetLastWinnersResponse.winners:type_name -> poker.Winner
	2,  // 8: poker.Winner.hand_rank:type_name -> poker.HandRank
	39, // 9: poker.Winner.best_hand:type_name -> poker.Card
	28, // 10: poker.GetTablesResponse.tables:type_name -> poker.Table
	38, // 11: poker.Table.players:type_name -> poker.Player
	0,  // 12: poker.Table.phase:type_name -> poker.GamePhase
	1,  // 13: poker.Notification.type:type_name -> poker.NotificationType
	39, // 14: poker.Notification.cards:type_name -> poker.Card
	2,  // 15: poker.Notification.hand_rank:type_name -> poker.HandRank
	28, // 16: poker.Notification.table:type_name -> poker.Table
	19, // 17: poker.Notification.winners:type_name -> poker.Winner
	37, // 18: poker.Notification.showdown:type_name -> poker.Showdown
	19, // 19: poker.Showdown.winners:type_name -> poker.Winner
	39, // 20: poker.Player.hand:type_name -> poker.Card
	3,  // 21: poker.PokerService.StartGameStream:input_type -> poker.StartGameStreamRequest
	46, // 22: poker.PokerService.ShowCards:input_type -> poker.ShowCardsRequest
	48, // 23: poker.PokerService.HideCards:input_type -> poker.HideCardsRequest
	5,  // 24: poker.PokerService.MakeBet:input_type -> poker.MakeBetRequest
	11, // 25: poker.PokerService.CallBet:input_type -> poker.CallBetRequest
	7,  // 26: poker.PokerService.FoldBet:input_type -> poker.FoldBetRequest
	9,  // 27: poker.PokerService.CheckBet:input_type -> poker.CheckBetRequest
	13, // 28: poker.PokerService.GetGameState:input_type -> poker.GetGameStateRequest
	15, // 29: poker.PokerService.EvaluateHand:input_type -> poker.EvaluateHandRequest
	17, // 30: poker.PokerService.GetLastWinners:input_type -> poker.GetLastWinnersRequest
	20, // 31: poker.LobbyService.CreateTable:input_type -> poker.CreateTableRequest
	22, // 32: poker.LobbyService.JoinTable:input_type -> poker.JoinTableRequest
	24, // 33: poker.LobbyService.LeaveTable:input_type -> poker.LeaveTableRequest
	26, // 34: poker.LobbyService.GetTables:input_type -> poker.GetTablesRequest
	44, // 35: poker.LobbyService.GetPlayerCurrentTable:input_type -> poker.GetPlayerCurrentTableRequest
	29, // 36: poker.LobbyService.GetBalance:input_type -> poker.GetBalanceRequest
	31, // 37: poker.LobbyService.UpdateBalance:input_type -> poker.UpdateBalanceRequest
	33, // 38: poker.LobbyService.ProcessTip:input_type -> poker.ProcessTipRequest
	40, // 39: poker.LobbyService.SetPlayerReady:input_type -> poker.SetPlayerReadyRequest
	42, // 40: poker.LobbyService.SetPlayerUnready:input_type -> poker.SetPlayerUnreadyRequest
	35, // 41: poker.LobbyService.StartNotificationStream:input_type -> poker.StartNotificationStreamRequest
	4,  // 42: poker.PokerService.StartGameStream:output_type -> poker.GameUpdate
	47, // 43: poker.PokerService.ShowCards:output_type -> poker.ShowCardsResponse
	49, // 44: poker.PokerService.HideCards:output_type -> poker.HideCardsResponse
	6,  // 45: poker.PokerService.MakeBet:output_type -> poker.MakeBetResponse
	12, // 46: poker.PokerService.CallBet:output_type -> poker.CallBetResponse
	8,  // 47: poker.PokerService.FoldBet:output_type -> poker.FoldBetResponse
	10, // 48: poker.PokerService.CheckBet:output_type -> poker.CheckBetResponse
	14, // 49: poker.PokerService.GetGameState:output_type -> poker.GetGameStateResponse
	16, // 50: poker.PokerService.EvaluateHand:output_type -> poker.EvaluateHandResponse
	18, // 51: poker.PokerService.GetLastWinners:output_type -> poker.GetLastWinnersResponse
	21, // 52: poker.LobbyService.CreateTable:output_type -> poker.CreateTableResponse
	23, // 53: poker.LobbyService.JoinTable:output_type -> poker.JoinTableResponse
	25, // 54: poker.LobbyService.LeaveTable:output_type -> poker.LeaveTableResponse
	27, // 55: poker.LobbyService.GetTables:output_type -> poker.GetTablesResponse
	45, // 56: poker.LobbyService.GetPlayerCurrentTable:output_type -> poker.GetPlayerCurrentTableResponse
	30, // 57: poker.LobbyService.GetBalance:output_type -> poker.GetBalanceResponse
	32, // 58: poker.LobbyService.UpdateBalance:output_type -> poker.UpdateBalanceResponse
	34, // 59: poker.LobbyService.ProcessTip:output_type -> poker.ProcessTipResponse
	41, // 60: poker.LobbyService.SetPlayerReady:output_type -> poker.SetPlayerReadyResponse
	43, // 61: poker.LobbyService.SetPlayerUnready:output_type -> poker.SetPlayerUnreadyResponse
	36, // 62: poker.LobbyService.StartNotificationStream:output_type -> poker.Notification
	42, // [42:63] is the sub-list for method output_type
	21, // [21:42] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_poker_proto_init() }
func file_poker_proto_init() {
	if File_poker_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_poker_proto_rawDesc), len(file_poker_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_poker_proto_goTypes,
		DependencyIndexes: file_poker_proto_depIdxs,
		EnumInfos:         file_poker_proto_enumTypes,
		MessageInfos:      file_poker_proto_msgTypes,
	}.Build()
	File_poker_proto = out.File
	file_poker_proto_goTypes = nil
	file_poker_proto_depIdxs = nil
}
